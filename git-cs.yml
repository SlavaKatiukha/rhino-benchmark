type: update
targetNodes:
  nodeGroup: cp 
name: Git and CS Bridge
 
settings:
  fields: 
    - type: string
      caption: Git Project
      name: gitProject
      required: true
      default: rhino-benchmark

    - type: string
      caption: Git Branch
      name: gitBranch
      required: true
      default: master

    - type: string
      caption: App Name
      name: appName
      required: true
      default: Rhino Benchmark

    - type: list
      caption: Action
      name: action
      values:
        push-to-git: Push To Git
      default: push-to-cs

onInstall:
  ${settings.action}: ${nodes.cp.master.id}    
  
actions: 
  push-to-git:
    - cmd[${this}]: |-
        rm -rf ${settings.gitProject}
        git clone -b ${settings.gitBranch} --single-branch https:///git@github.com:jelastic/${settings.gitProject}.git
        cd ${settings.gitProject}
        git rm --ignore-unmatch -r cs        
    - cmd[${this}]: pwd
    - script: |
        var home = "${response.responses[0].out}";   
        var appName = "${settings.appName}";
        var appid = jelastic.local.utils.MD5(appName).toString();
        var resp = jelastic.dev.scripting.GetScripts(appid, session);
        if (resp.result != 0) return resp;
        var s = resp.scripts, resps = [];
        
        var resp = jelastic.env.file.Create({
          envName: "${env.envName}",
          path: home + "/${settings.gitProject}/cs",
          nodeid: ${this},
          isdir: true
        });
        if (resp.result != 0) return resp;
        
        for (var i = 0; i < s.length; i++){
          var n = s[i].name;
          var type = s[i].type;
          if (type == "javascript") type = "js";
          var resp = jelastic.env.file.Write({
            envName: "${env.envName}",
            path: home + "/${settings.gitProject}/cs/" + n + "." + type,
            body: s[i].code,
            nodeid: ${this}
          })
          if (resp.result != 0) return resp;
          var r = {}; r[n] = resp;
          resps.push(r);
        }
        return {result:0, responses: resps}
    - cmd[${this}]: |-
        cd ${settings.gitProject}
        git config --global user.email "${user.email}"
        git config --global user.name "${settings.gitUser}"
        git add -A
        git commit -a -m "push to git from cs"
        git push
        rm -rf ../${settings.gitProject}
        
  push-to-cs:
    - cmd[${this}]: |-
        rm -rf ${settings.gitProject}
        git clone -b ${settings.gitBranch} --single-branch https:///git@github.com:jelastic/${settings.gitProject}.git
    - cmd[${this}]: pwd
    - script: |
        var customization = "ls.tokens";
        var home = "${response.responses[0].out}";
        var path = home + "/${settings.gitProject}/cs/";
        var resp = jelastic.env.file.GetList({
          envName: "${env.envName}",
          path: path,
          nodeid: ${this}
        })
        if (resp.result != 0) return resp;
        var f = resp.keywords[0].files, resps = [];
        
        var appName = "${settings.appName}";
        var appid = jelastic.local.utils.MD5(appName);
        var config = {notify_by_email:false};
        var resp = jelastic.dev.apps.GenerateAppWithAppID({name:appName, description:appName, keywords:appName, config: config, idapp:appid})         
        if (resp.result != 0 && resp.result != 917) return resp;
        
        var resp = jelastic.dev.scripting.GetScripts(appid, session);
        if (resp.result != 0) return resp;
        var s = resp.scripts, resps = [], customizationExist = false;
        for (var i = 0; i < s.length; i++){
          if (s[i].name == customization) {
            customizationExist = true;
            continue;
          }
          var resp = jelastic.dev.scripting.DeleteScript(appid, session, s[i].name);
          if (resp.result != 0) return resp;
        }        
        
        for (var i = 0; i < f.length; i++){
          var n = f[i].name.toString();
          if (f[i].isdir || n.indexOf(".") == 0) continue;
          var resp = jelastic.env.file.Read({
            envName: "${env.envName}",
            path: path + n,
            nodeid: ${this}
          })          
          if (resp.result != 0) return resp;
          var ind = n.lastIndexOf(".");
          var name = n.substring(0, ind);
          if (customizationExist && name == customization) continue;
          var type = n.substring(ind + 1);
          var resp = jelastic.dev.scripting.CreateScript(appid, session, name, type, resp.body);
          var r = {}; r[n] = resp;
          resps.push(r);
        }
        return {result:0, responses: resps}

    
    
